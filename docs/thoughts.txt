
 The first song you write will be bad. But the next song that you write will be bad. But the next song that you write will be bad.
 Make lots of bad songs. You'll only realise how much progress you've made, when you look back on your old songs and see they are much, much worse than the bad songs you are making now.

 When I noticed I was making a lot of similar structures in my songs I made a template to help me quickly start up new projects. As soon as I finished it I hated it and vowed never to use it. Because struggle is life.

 Every 4 bars should introduce something new, or remove something old.

 When writing guitar it's easy to think in blocks of 4 chords, and to do intro-verse-bridge-chorus. When writing music on computer it's easy to get stuck in a loop of 2 chords over and over. Because none of the chunks you've written are in those chords and you don't want to do it again.


 Everything is a placeholder until it isn't.

 If everything is emphasized then nothing is.

 Wall of sound is good. Clutter is bad. Keep adding things and removing things until it feels right.

    Balance between:
 Clean vs dirty
 Simple vs complex
 Melodic vs dischordant
 Controlled vs emergent
 Gentle vs Frantic. (not governed by speed)


 You have to listen to the same loop over and over, to work out what is wrong and what to add. But in that time you become desensitised to it, it makes you sick with it's familiarity and you forget why it is beautiful. At the same time, it's flaws become smoothed over because your brain predicts that pattern is about to come up. Only when you listen back with fresh ears after time has passed do you hear the real good and bad of it.

 Sometimes you have to indroduce an idea in a stripped down simple form, then introduce all the complexity, otherwise it won't work.

 Don't hyperfocus on one track that isn't working for you. Create 10 scrappy concepts and feel which appeals to you.

 If you listen to a loop too often it gets exhausted.

 Alternate between lilting and punctuated, frantic and calm. Don't pursue a melody over too many beats, break it up into different instruments.

 You could learn to create by independantly recreating every known trick in modern musical history, or... or... you could learn by copying. Take your fave song, or a song that you think you could make using this tool, or a song that you think you couldn't make using this tool, and start recreating it. No doubt half way through you'll get your own ideas about which direction the song should go in. And then once you feel you have something that can stand by itself, go back and remove or mutate or shrink the bits that came from someone else.

  >>>>>>>>>>>>>>>>>>>>>>>>>>>>

  Tasks:
  * use Slowcat to merge 2x4 loops in a 8 sized sequence.
  * Use transpose to vary a _aaa inside the final arrange, for variety.
  * Set volume in mininotation for individual notes- eg "bd:1:4" is a loud drum.
  * Bite - chop up a pattern into x pieces and play in this order.

 * Get good photo for soundcloud library
 * Contact people about it.
 * Get log in creds for AWS to reset password to upload snappy fingers.

 * Upload the not-shit versions on soundcloud up to youtube.
 - estroyel - READY -
 - whisterly - READY -
 - uruppy - READY -
 - rowlyups - READY - 
 - blingety - READY -
 - boogler - READY -
 - weirderer - READY - 

>>>>>>>>>>>>>>>>>>>>>>>>>>>

Made using strudel.cc, the javascript version of TidalCycles. Created by typing lines of code. No drag and drop mouse nonsense, or actual instruments.
#strudel #electronica #blippy #upbeat #algorave

More on SoundCloud: https://soundcloud.com/stuart-j-bray

Video Playlist: https://www.youtube.com/playlist?list=PLw64hCyIy2NUqv94tSHrqLAlu4fOB0hZu

Source code: https://bitbucket.org/stuartbray/strudel/

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var top = n("0,1,2,3,4,5,6,7,8,9").scale("c1:major").color("#111")
var bottom = n("0,1,2,3,4,5,6,7,8,9").scale("c0:major").color("#111")
var r1 = 10
var r2 = 20
var r3 = 20
var r4 = 10

var tCols = ["black","cyan","pink","white","pink","cyan","black"];
var pCols = ["black","red","orange","yellow","green","blue","purple","black"];

for(var i=0; i<10; i++){
  r1 = i;
}

var tf = stack(
  n("-1,5".add(r1)).color(tCols[0]),
  n("0,4 ".add(r1)).color(tCols[1]),
  n("1,3 ".add(r1)).color(tCols[2]),
  n("2   ".add(r1)).color(tCols[3]),
)
var tf2 = stack(
  n("-1,5".add(r3)).color(tCols[0]),
  n("0,4 ".add(r3)).color(tCols[1]),
  n("1,3 ".add(r3)).color(tCols[2]),
  n("2   ".add(r3)).color(tCols[3]),
)
  var pf = stack(
  n("-1,6".add(r2)).color(pCols[0]),
  n("5   ".add(r2)).color(pCols[1]),
  n("4   ".add(r2)).color(pCols[2]),
  n("3   ".add(r2)).color(pCols[3]), 
  n("2   ".add(r2)).color(pCols[4]),
  n("1   ".add(r2)).color(pCols[5]),
  n("0   ".add(r2)).color(pCols[6]),
)
var pf2 = stack(
  n("-1,6".add(r4)).color(pCols[0]),
  n("5   ".add(r4)).color(pCols[1]),
  n("4   ".add(r4)).color(pCols[2]),
  n("3   ".add(r4)).color(pCols[3]), 
  n("2   ".add(r4)).color(pCols[4]),
  n("1   ".add(r4)).color(pCols[5]),
  n("0   ".add(r4)).color(pCols[6]),
)
setCpm(60)
$: arrange(
 [1,stack( pf,   tf, )],
 [1,silence],
 [1,stack( pf2,  tf2,)],
 [1,silence],
).lpf(0).punchcard({ cycles:8, fillActive:1, fold:1, background:'#000'})
