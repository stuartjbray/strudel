//@title beep-tea
//@by Stuart Bray
//@url https://soundcloud.com/stuart-j-bray

/* aktar assala
*/
setcpm(30)

// -------------- Drums
var d1 = sound("RolandCompurhythm1000_mt").struct(  "1 [0 1] 0 0 0 <0 1> 0 0")
var d2 = sound("OberheimDMX_mt").struct(            "0 0 1 1 0 0 1 0")
var d3 = sound("AkaiMPC60_rim").struct(             "[0 1] 0 [0 1] 0 0 [0 1] [0 1] 0 ").gain(".5 .5 1 2")
var d4 = sound("perc").struct(                      "0 0 1 0 0 0 0 0")
var d5 = sound("AkaiMPC60_perc").struct(            "0 0 0 0 0 2*2 0 0 ")

var d3x = sound("AkaiMPC60_rim").struct(            "0 0 0 1 0 1*2 <0 1*4> 1*<4 8> ")

var db2 = sound("OberheimDMX_mt").struct(            "0 0 1 1 0 0 1 0  0 0 0 0 0 0 0 0").slow(2)
var db3 = sound("AkaiMPC60_rim").struct(             "0 0 0 0 1*2 0 0 0  0 0 0 0 1*2 0 1 0").slow(2)
var db4 = sound("AlesisSR16_cp").struct(             "0 0 1 0 0 0 1 0  0 0 1 0 0 0 1 0").slow(2)
var db5 = sound("AkaiXR10_sd").struct(               "0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 1").slow(2)
var db6 = sound("AkaiMPC60_perc").struct(             "0 0 0 0 0 1*2 0 0  0 0 0 1*2 0 0 0 0").slow(2)


var _drums_intro = stack( d1,  d3x  ).color("white") // build up
var _drums1 =     stack(  d1,  d2,  d3,  d4, d5).color("white") // normal
var _drums2 =     stack(  d1, db2, db3, db4, db5, db6).color("red") // break down
var _drums3 =     stack(  d1,  db3).color("red") // break down

_$: arrange( 
    // [4,_drums_intro],
    // [4,_drums1],
    [4,_drums2]
   )
.punchcard()

var chords1 = n(`<
 [5 -  [6 5] [- 5] ] -
 [4 -  [5 4] [- 4] ] -
>`)
var chords2 = n(`<
 [3 - [4 3] [- 3]] -
 [2 - [3 2] [- 2]] -
>`)
var _chords1 = chords1.sound("dantranh_vibrato").scale("c2:major").color("red").distort(2)
var _chords2 = chords2.sound("dantranh_vibrato").scale("c2:major").color("red").distort(2)

var chords3 = n(`<
 [4 4 - -]
 [5 5 - -]
 [7 7 - -]
 [9 9 - -]
>`)
var chords4 = n(`<
 [4 4 - -]
 [7 7 - -]
 [9 9 - -]
 [5 5 - -]
>`)
var _chords3 = chords3.sound("dantranh_vibrato").scale("c2:major").color("red").distort(2)
var _chords4 = chords4.sound("dantranh_vibrato").scale("c2:major").color("red").distort(2)

var punch1 = n(`<
 [5,7,9] [5,7,10] [4,7,9] [4,7,10]
>`)
var punch2 = n(`<
 [3,5,7] [3,5,8] [2,5,8] [2,5,9]
>`)
var punch3 = n(`<
 [3,5,7] [3,5,8] [3,5,9] [3,5,10] 
>`)
var punch4 = n(`<
 [4,7,9] [4,7,10] [4,7,11] [4,7,12]
>`)
var _punch1 = punch1.sound("gm_shamisen").scale("c3:major").color("orange").release(.4).clip(1.5).gain(4)
  .struct("0 1*2 0 0 0 1@2 0 ") //1 0 [0 1] 0
var _punch2 = punch2.sound("gm_shamisen").scale("c3:major").color("orange").release(.4).clip(1.5).gain(4)
  .struct("0 1*2 0 0 0 1@2 0 ")

var _punch3 = punch3.sound("gm_shamisen").scale("c3:major").color("orange").release(.4).clip(1.5).gain(4)
  .struct("0 0 0 1 0 0 1 0") //1 0 [0 1] 0
var _punch4 = punch4.sound("gm_shamisen").scale("c3:major").color("orange").release(.4).clip(1.5).gain(4)
  .struct("0 0 0 1 0 0 1 0 ")

var sweep1 = n(`<
 5 5 4 4
>`)
var sweep2 = n(`<
 3 3 2 2
>`)
var _sweep1 = sweep1.sound(" harmonica").scale("c2:major").color("green").gain(2).release(.1).vibrato(8)
var _sweep2 = sweep2.sound(" harmonica").scale("c2:major").color("green").gain(2).release(.1).vibrato(8)

var lead1 = n(`<
 [[5 6 5 4 5 4 2 1] [4 1 5 1 5 1 5 1]] -
 [[4 1 5 1 6 7 8 1] [4 1 5 1 5 1 5 1]] -
>`)
var lead2 = n(`<
 [[5 6 5 4 5 4 2 1] [4 1 5 1 5 1 5 1]] -
 [[4 1 5 1 6 7 8 1] [4 1 5 1 5 1 5 1]] -
>`)
var _lead1 = lead1.sound("gm_marimba").scale("c4:major").color("yellow").gain(2.5)
var _lead2 = lead2.sound("gm_marimba").scale("c4:major").color("yellow").gain(2.5)

var lead3 = n(`<
 [- - [5 6 7 -] -]
 [- - [5 4 5 -] -]
 [- - [5 6 7 -] -]
 [- - [5 4 5 -] -]
>`)
var lead4 = n(`<
 [- - [5 6 7 -] -]
 [- - [8 7 8 -] -]
 [- - [6 7 8 -] -]
 [- - [8 9 8 -] -]
>`)
var _lead3 = lead3.sound("gm_marimba").scale("<c3,c4>:major").color("yellow").gain(3).room(1.3)
var _lead4 = lead4.sound("gm_marimba").scale("<c3,c4>:major").color("yellow").gain(3).room(1.3)




var top1 = n(`<
 [5@3 -]
 [4 5 - 6]
 [7 4@3]
 [3 2 - 4]
>`)
var top2 = n(`<
 [3@3 -]
 [4 3 - 1]
 [3 5@2 7]
 [6 2 - 7]
>`)
var _top1 = top1.sound("gm_french_horn").scale("<c3,c4>:major").color("cyan").gain(2)
var _top2 = top2.sound("gm_french_horn").scale("<c3,c4>:major").color("cyan").gain(2)

var top3 = n(`<
 [- - 4 3]
 [- - 4 5]
 [- - 9 7]
 [- - 10 9]
>`)
var top4 = n(`<
 [- - 4 5]
 [- - 5 7]
 [- - 7 5]
 [- - 5 4]
>`)
var _top3 = top3.sound("gm_french_horn").scale("<c3,c4>:major").color("cyan").gain(2)
var _top4 = top4.sound("gm_french_horn").scale("<c3,c4>:major").color("cyan").gain(2)


    //.bite(4,"2,3,1,4").fast(2),
    //.lpf("500 2000 500 2000").echo(4, 1/16, .8),


var M = 1;
$: arrange(
  [M*2, stack(    
    _drums_intro,
  )],
  [M*4, stack(    
    _drums1,
    _chords1, _sweep1,
  )],
  [M*4, stack(
    _drums1,
    _chords2, _sweep2,
  )],
  [0*4, stack(    
    _drums1, 
    _chords1,  _punch1, _sweep1,
  )],
  [0*4, stack(
    _drums1,
    _chords2, _punch2, _sweep2,
  )],
  [M*4, stack(    
    _drums1,
    _chords1,  _punch1,  _lead1,    _sweep1,
  )],
  [M*4, stack(
    _drums1,
    _chords2,  _punch2,    _lead2,    _sweep2,
  )],
  
  [M*2, stack(
    _drums2,
  )],
  [M*4, stack(    // Everything so far.
    _drums2,
    _chords1.transpose(-12),
    _punch1,
    _top1, // cyan
    _sweep1.transpose(-12),
  )],
  [M*4, stack(
    _drums2,
    _chords2.transpose(-12),
    _punch2,
    _top2,
    _sweep2.transpose(-12),
  )],
  [M*4, stack(    // dial back a little
    _drums2,
    _chords1,
    _punch1,
    _top1, _lead3,
  )],
  [M*4, stack(
    _drums2,
    _chords2,
    _punch2,
    _top2, _lead4,
  )],  
  
  [M*4, stack(    // muffle
    _drums3.lpf("1500 3000 1000"),
    _punch1.hpf(1500),
    _lead3.echo(3, 1/4, .8),
  )],
  [M*4, stack(
    _drums3.lpf("1500 3000 1000"),
    _punch2.hpf(1500),
    _lead4.echo(3, 1/4, .8),
  )],
  [M*2, stack(
    _drums2,
  )],
  [M*4, stack(    // Chorus
    _drums2,
    _chords3,
    _punch3,
    _top3, // cyan
  )],
  [M*4, stack(
    _drums2,
    _chords4,
    _punch4,
    _top4,
  )],    
  [1*4, stack(
    _drums3,
    _chords3,
    _punch3,
    _top3, // cyan
  )],
  [1*4, stack(
    _drums3,
    _chords4,
    _punch4,
    _top4,
  )],    
  ).punchcard()
  