setCpm(30)


var d1 = sound("AkaiXR10_mt").struct(  "0 [- 1] 0 0 0 0 0 0")
var d2 = sound("AkaiXR10_lt").struct(  "0 1 0 0 0 0 0 0")
var d3 = sound("AkaiXR10_hh").struct(  "0 0 0 1 0 1 0 1")
var d4 = sound("AkaiLinn_lt").struct(  "0 0 0 0 1*2 0 1*2 0").lpf("[500 2000]*8")

var _drums_intro =     stack(  d1, d2, d3, d4) .color("white")
var _drums1 = stack( d1, d2, d3, d4  ).color("white") // d1_down
//var _drums2 =     stack(  d1, d2  ).color("white") // break down



var aaa = n(`<
 [ 5 - 5 -  <5 7> [- 5]  - 4 ]
 >`)
var _aaa = aaa.sound("gm_timpani").scale("c2:minor").color("yellow").distort(2).room(1.2)


var bbb = n(`<
 10 11 5 6# 
>`)
var _bbb = bbb.sound("gm_oboe").scale("c3:minor").color("orange")

var ccc = n(`<
 5 6 5 2
>`)
var ccc2 = n(`<
 9 6 7 2
>`)
var _ccc = ccc.sound("gm_alto_sax").scale("c2:minor").color("red")
var _ccc2 = ccc2.sound("gm_alto_sax").scale("c2:minor").color("red")


var ddd = n(`<
 [- 5 - 5 - 4 - 4 - 3 - 3 - 2 - -]
 -
 [- 5 - 5 - 4 - 5 - 6 - 6 - 7 - -] 
 -
>`)
var ddd2 = n(`<
 [- 5 - 5 - 4 - 4 - 3 - 3 - 2 - -]
 -
 [- 5 - 5 - 4 - 5 - 6 - 6 - 7 - -] 
 -
>`)
var _ddd = ddd.sound("piano").scale("c3:minor").color("red")
var _ddd2 = ddd2.sound("piano").scale("c3:minor").color("red")

var M = 1;
$: arrange(
  [M*4,stack(
    _drums_intro,
    _aaa,
  )],
  [M*8,stack(
    _aaa,
    _bbb,
    _ccc,
    _ddd,
  )],
  [M*8,stack(
    _aaa,
    _bbb.transpose(12),
    _ccc.transpose(12),
    _ddd.transpose(12),
  )],
  [8,stack(
    _drums1,
    _aaa,
    _bbb,
    _ccc2,
    _ddd2,
  )],
).punchcard()