//@title thirst-pass
//@by Stuart Bray
//@url https://soundcloud.com/stuart-j-bray
setcpm(35)

// -------------- Drums
const drumsPass = (x) => x.gain(slider(0.281)).color("white") ;
var d1 = sound("circuitstom_bd").struct( "1 0 1 0 0 1 0 1")
var d2 = sound("AkaiMPC60_rim").struct(  "0 0 0 0 1 0 <0@3 1> 0")
var d3 = sound("AlesisSR16_hh").struct(  "0 0 0 0 1 0 1 <0@3 1>")
var d4 = sound("AkaiLinn_bd").struct(    "0 0 0 1 0 1 0 0")
var d5 = sound("circuitstom_sd").struct( "0 0 1 0 0 1 <0@3 1> 0")

var d1b = sound("circuitstom_bd").struct( "1 - - 1 1 1 -@5 1 1 1 1 1")
var d3b = sound("AlesisSR16_hh").struct(  "1*4 - - -  1*4 - - -")
var d5b = sound("circuitstom_sd").struct( "1 0 1 0 0 1 0 1  0 0 0 0 1 0 1 0").lpf("500 1000 1500 2000")

var d3c = sound("AlesisSR16_hh").struct(  "1!8").lpf("500 2000")

var _drums_intro = drumsPass(stack( d1b,  d5b  )).slow(2)         // build up
var _drums1 =     drumsPass(stack(  d1,  d2,  d3,  d4, d5))           // normal
var _drums2 =     drumsPass(stack(  d1, d2, d3c))                   // break down
var _drums4 =     drumsPass(stack(  d2, d3c))

var _drum_xyl = sound("xylophone_hard_ff").struct("0 0 1 0").gain(.3).lpf("<500 750 1000 1250 1500 1750 2000 2250>")
_$: _drum_xyl

// Define pass functions for each instrument. And NPass functions for note patterns.
var chordsPass = (x) => x.sound("piano").scale("c3:minor").color("red").gain(slider(0.369)).lpf("500 1000")
var chordsNPass = (x) => x.struct("1 0 0 0 1 <0 1> 0 0")
var tunePass = (x) => x.sound("piano").scale("c5:minor").color("red").gain(slider(0.735))
var basePass = (x) => x.sound("gm_fx_atmosphere").release(1.5).scale("c3:minor").color("orange").gain(slider(0.655))
var leadPass = (x) => x.sound("handchimes").scale("c3:minor").color("yellow").room(2).gain(slider(0.505))
var dugPass = (x) => x.sound("gm_banjo").scale("c2:minor").color("cyan").echo(4,1/8,1.2).room(1)//.gain(slider(0.829))

var _chords1 = chordsPass(n(chordsNPass(`< 0 0 7 3      0 0 7 5>`))).transpose("0,12")
var _chords2 = chordsPass(n(chordsNPass(`< 5 5 4 6      5 5 4 6 >`))).transpose("0,12")
var _chords3 = chordsPass(n(chordsNPass(`< 0 0 -2 -2    -4 -4 -5 -5>`))).transpose("0,12")
var _chords4 = chordsPass(n(chordsNPass(`< -4 -4 -5 -5  -4 -4 -2 -1>`))).transpose("0,12")

var _tune1 = tunePass(n(`< 
  [4 [2 4] 6 -] -
  [3 4 3 - - - - -] -
  [2 3 2 -@5]
  [0 4 -@2]
  [1 4 -@2]
  [2]
>`))
var _tune2 = tunePass(n(`< 
 [0,3] -
 [0,2] -
 [0,3] -
 [0,4] -
>`))

var _tune3 = tunePass(n(`< 
  [4 [2 4] 6 -]
  [[5 6] 5 - 4] 
  [3 4 3 - 0 1 2 0]
  [-2 5 -@2]
  
  [4 5 4 3 4 3 2 1]
  [-2 - 5 -@2 -2 - 6]
  [6 6 6 - - 4 4 4]
  [- - 2 1 2 3 2 1]
>`))
var _tune4 = tunePass(n(`< 
  [4 [3 2] 4 -] -
  [2 [1 0] 2 -] -
  [0 1 0 -1 0 -@3] -
  [[-2,4] [-2,6] - [[6,9] [6,8]]] -
>`))
var _tune5 = tunePass(n(`< 
 [5,7,9]
 [4,7,<9 11>]
 [6,9,<10 12>]
 [6,8,<10 11>]
>`)).transpose(-24)
var _tune6 = tunePass(n(`< 
 [5,7,9]
>`))

var _base1 = basePass(n(`< 0 - 2 ->`))
var _base2 = basePass(n(`< 5 - 4 ->`))
var _base3 = basePass(n(`< 0 - 2 ->`))
var _base4 = basePass(n(`< 5 - 7 ->`))
var _base5 = basePass(n(`< 5 - 4 - 7 - 8 ->`))
var _base6 = basePass(n(`< 0 - 1 ->`))

var _lead1 = leadPass(n(`< [4 5] - [3 4] - [2 3] - [1 -] ->`))
var _lead2 = leadPass(n(`< [2 3] <4 -> [1 -] <5 6>>`))

var _dug1 = dugPass(n(`< - 0 - 2 >`))
var _dug2 = dugPass(n(`< - 5 - 4 >`))

var M = 1;
$: arrange(
  [M*2, stack(    _drums_intro,  )],
  [M*8, stack(    _drums1,    _chords1, _tune1,     _base1,  )],
  [M*8, stack(    _drums2,    _chords2, _tune2,    _base2,  )],
  [M*8, stack(    _drums1,     _drum_xyl,    _chords3,    _tune3,    _base3,  )],
  [M*8, stack(    _drums2,    _drum_xyl,    _chords4,   _tune4,     _base4,  )],
  [M*8, stack(    _drums1,    _chords1,     _base1,    _lead1,     _dug1,  )],
  [M*8, stack(    _drums2,    _chords2,    _base2,    _lead2,    _dug2,  )],
  [M*8, stack(    
    _drums4,
    _tune4.mask("1 - "),
    _tune5.arp("0 [-[1,2]] [0,2] 1").clip(".9 1").gain(.6),
    _tune5.arp("0 1 - 2").transpose(-12),
    _base5,    _lead1
  )],
  [M*8, stack(
    _drums2,
    _tune4.mask("1 - ").transpose(-12),
    _tune5.arp("0 [-[1,2]] [0,2] 1").clip(".3").ply(2).gain(.3),
    _tune5.arp("0 1 - 2").gain(.7),
    _base5,    
  )],
  [1*8, stack(    _drums1,     _drum_xyl, 
    _chords3,    _tune3.transpose(-24),    _base3.transpose(12),  )],
  [1*8, stack(    _drums2,    _drum_xyl,    
    _chords4,   _tune4.transpose(-24),     _base4.transpose(12),  )],
  [1,silence]
)//.punchcard()
  
